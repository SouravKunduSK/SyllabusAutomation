@model SyllabusAutomation.Models.UserLogin
@{
    ViewBag.Title = "RegisterNewAccount";
    Layout = "~/Views/Shared/_AccountLayout.cshtml";
}
@using (Html.BeginForm())
{
    <div class="container-fluid">
        <div class="container">
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <!-- Outer Row -->
            <div class="row justify-content-center">

                <div class="col-xl-10 col-lg-12 col-md-9">

                    <div class="card o-hidden border-0 shadow-lg my-5">
                        <div class="card-body p-0">
                            <!-- Nested Row within Card Body -->
                            <div class="row">
                                <div class="col-lg-6 d-none d-lg-block">
                                    <img src="~/Uploads/element5-digital-OyCl7Y4y0Bk-unsplash.jpg" alt="" style="height:550px; width:480px;" />
                                </div>


                                <div class="col-lg-6">
                                    <div class="p-5">
                                        <div class="text-center">
                                            <h1 class="h4 text-gray-900 mb-4">Welcome To<br /> Syllabus Automation System!</h1>
                                        </div>








                                        @if (ViewBag.Message != null)
                                        {
                                            <div class="alert alert-danger">
                                                @ViewBag.Message
                                            </div>
                                        }

                                        <hr />
                                        <div class="form-group row">
                                            <div class="col-sm-6 mb-3 mb-sm-0">
                                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", required = "required", @placeholder = "First Name" } })
                                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-sm-6">
                                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", required = "required", @placeholder = "Last Name" } })
                                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @required = "required", @placeholder = "Email Address" } })
                                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                        </div>
                                      
                                            <div class="form-group">
                                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { id = "id_password", @class = "form-control", @autocomplete = "off", @required = "required", @placeholder = "Password" } })
                                                <i class="far fa-eye fa-eye-slash" style=" cursor: pointer; float:right;" id="togglePassword"></i>
                                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group">
                                                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { id = "id_password_cp", @class = "form-control", @autocomplete = "off", @required = "required", @placeholder = "Confirm Password" } })
                                                <i class="far fa-eye fa-eye-slash" style=" cursor: pointer; float: right; margin-top: -27px; margin-right: 13px;" id="togglePassword_cp"></i>
                                                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                                            </div>
                                        




                                        <input type="submit" value="Sign Up" class="btn btn-success btn-user btn-block" />




                                        <hr>
                                        <div class="text-center">
                                            <label class="small">Already have an account? </label>
                                            <a class="small" href="@Url.Action("Login","Account")">Login!</a>
                                        </div>






                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

            </div>

        </div>
    </div>

}





<script>
    const togglePassword = document.querySelector('#togglePassword');
    const password = document.querySelector('#id_password');

    togglePassword.addEventListener('click', function (e) {
        // toggle the type attribute
        const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
        password.setAttribute('type', type);
        // toggle the eye slash icon
        this.classList.toggle('fa-eye-slash');
    });
    const togglePassword_cp = document.querySelector('#togglePassword_cp');
    const password_cp = document.querySelector('#id_password_cp');

    togglePassword_cp.addEventListener('click', function (e) {
        // toggle the type attribute
        const type = password_cp.getAttribute('type') === 'password' ? 'text' : 'password';
        password_cp.setAttribute('type', type);
        // toggle the eye slash icon
        this.classList.toggle('fa-eye-slash');
    });
</script>
<style>
    i#togglePassword {
        margin-top: -27px;
        margin-right: 13px;
    }
</style>

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")


